#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    int height;
};

class AVLTree {
    private:
        Node* root;

        Node* createNode(int value) {
            Node* newNode = new Node;
            newNode->data = value;
            newNode->left = nullptr;
            newNode->right = nullptr;
            newNode->height = 1;
            return newNode;
        }

        int getHeight(Node* node) {
            if (node == nullptr) {
                return 0;
            }
            return node->height;
        }

        int getBalanceFactor(Node* node) {
            if (node == nullptr) {
                return 0;
            }
            return getHeight(node->left) - getHeight(node->right);
        }

        Node* rotateRight(Node* node) {
            Node* newNode = node->left;
            node->left = newNode->right;
            newNode->right = node;
            node->height = 1 + max(getHeight(node->left), getHeight(node->right));
            newNode->height = 1 + max(getHeight(newNode->left), getHeight(newNode->right));
            return newNode;
        }

        Node* rotateLeft(Node* node) {
            Node* newNode = node->right;
            node->right = newNode->left;
            newNode->left = node;
            node->height = 1 + max(getHeight(node->left), getHeight(node->right));
            newNode->height = 1 + max(getHeight(newNode->left), getHeight(newNode->right));
            return newNode;
        }

        Node* insert(Node* node, int value) {
            if (node == nullptr) {
                return createNode(value);
            }
            if (value < node->data) {
                node->left = insert(node->left, value);
            } else if (value > node->data) {
                node->right = insert(node->right, value);
            } else {
                return node;
            }
            node->height = 1 + max(getHeight(node->left), getHeight(node->right));
            int balanceFactor = getBalanceFactor(node);
            if (balanceFactor > 1 && value < node->left->data) {
                return rotateRight(node);
            }
            if (balanceFactor < -1 && value > node->right->data) {
                return rotateLeft(node);
            }
            if (balanceFactor > 1 && value > node->left->data) {
                node->left = rotateLeft(node->left);
                return rotateRight(node);
            }
            if (balanceFactor < -1 && value < node->right->data) {
                node->right = rotateRight(node->right);
                return rotateLeft(node);
            }
            return node;
        }

        void inorderTraversal(Node* node) {
            if (node == nullptr) {
                return;
            }
            inorderTraversal(node->left);
            cout << node->data << " ";
            inorderTraversal(node->right);
        }

    public:
        AVLTree() {
            root = nullptr;
        }

        void insert(int value) {
            root = insert(root, value);
        }

        void printInorderTraversal() {
            inorderTraversal(root);
        }
};

int main() {
    AVLTree tree;
    tree.insert(10);
    tree.insert(20);
    tree.insert(30);
    tree.insert(40);
    tree.insert(50);
    tree.insert(25);
    cout << "Inorder Traversal: ";
    tree.printInorderTraversal();
